CS224
Lab 07
Section 003
Furkan Mert Aksakal 
22003191

CS224
Lab 07
Section 003
Buğra Çayır
22202461

18.12.2024

Prelinary Work

a-)
SFRs for the I/O device(s): portA, portB, TRISA, TRISE

b-)
/*******************************************************************************
 * Program: Two-Button DC Motor Controller
 * 
 * Purpose: Controls a DC motor's direction using two pushbuttons on a Beti board.
 *          - Button 0: Clockwise rotation after 1s delay, runs for 1s
 *          - Button 1: Counter-clockwise rotation after 1s delay, runs for 1s
 *          - Both buttons: Motor stops
 * 
 * Hardware Configuration:
 * - DC Motor Connection: PORTA
 *   - PORTA.B1: Counter-clockwise control
 *   - PORTA.B2: Clockwise control
 *   - Jumper setting: 5V
 * 
 * - Push Buttons: PORTE
 *   - PORTE.B0: Button 0 (Clockwise control)
 *   - PORTE.B1: Button 1 (Counter-clockwise control)
 *   - Jumper settings: 3.3V, pull-up (top jumper right, bottom jumper left)
 * 
 * Operation:
 * 1. Single button press initiates rotation after 1 second delay
 * 2. Motor runs for exactly 1 second then stops
 * 3. Dual button press immediately stops the motor
 * 4. Debounce delay prevents accidental dual-press detection
 *******************************************************************************/

// Pin definitions for better readability
#define MOTOR_CW      PORTA.B2    // Clockwise control pin
#define MOTOR_CCW     PORTA.B1    // Counter-clockwise control pin
#define BUTTON_CW     PORTE.B0    // Clockwise button input
#define BUTTON_CCW    PORTE.B1    // Counter-clockwise button input

// Timing constants (in milliseconds)
#define DEBOUNCE_DELAY    150     // Delay to prevent button bounce
#define STARTUP_DELAY     1000    // Delay before motor starts
#define ROTATION_TIME     1000    // How long motor runs

// Function to stop the motor
void stopMotor() {
    MOTOR_CW = 0;
    MOTOR_CCW = 0;
}

// Function to run motor in specified direction
void runMotor(char clockwise) {
    stopMotor();                  // Ensure motor is stopped first
    Delay_ms(STARTUP_DELAY);      // Wait required 1 second
    
    if (clockwise) {
        MOTOR_CW = 1;            // Start clockwise rotation
    } else {
        MOTOR_CCW = 1;           // Start counter-clockwise rotation
    }
    
    Delay_ms(ROTATION_TIME);     // Run for 1 second
    stopMotor();                 // Stop motor
}

void main() {
    // Initialize microcontroller settings
    DDPCON.JTAGEN = 0;           // Disable JTAG to free up pins
    TRISA = 0x0000;              // Set PORTA as output (motor control)
    TRISE = 0xFFFF;              // Set PORTE as input (buttons)
    
    // Ensure motor is stopped at startup
    stopMotor();

    while(1) {
        // Add debounce delay to prevent accidental dual-press
        Delay_ms(DEBOUNCE_DELAY);
        
        // Check button states and control motor accordingly
        if(BUTTON_CW && BUTTON_CCW) {
            // Both buttons pressed - stop motor immediately
            stopMotor();
            Delay_ms(STARTUP_DELAY);  // Wait before accepting new input
        }
        else if(BUTTON_CW) {
            // Button 0 pressed - clockwise rotation
            runMotor(1);
        }
        else if(BUTTON_CCW) {
            // Button 1 pressed - counter-clockwise rotation
            runMotor(0);
        }
    }
}

c-)
SFRs for the I/O device(s): portA, portB, TRISA, TRISE

d-)
/*******************************************************************************
 * Program: Fibonacci Sequence Display
 * 
 * Purpose: Displays Fibonacci numbers on a 4-digit seven-segment display module.
 *          Each number is shown for i*100ms, where i is its position in sequence.
 * 
 * Hardware Configuration:
 * - Connect portA to J1 Port of 4-Digit Seven Segment Module
 * - Connect portE to J2 Port of 4-Digit Seven Segment Module
 * - Jumper settings: 5V, pull down (top one to left, other to right)
 *
 * Note: The display can only show one digit at a time, but rapid switching
 *       creates the illusion of simultaneous display through persistence of vision.
 *******************************************************************************/

// Hexadecimal values for digits 0-9 on 7-segment display
unsigned char binary_pattern[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};

// Variables for Fibonacci calculation
unsigned int currentFib = 1;    // Current Fibonacci number
unsigned int prevFib = 0;       // Previous Fibonacci number
unsigned int position = 1;      // Position in sequence (for delay calculation)

// Function to display a number across all digits
void displayNumber(unsigned int num) {
    // Display thousands digit
    PORTA = binary_pattern[num / 1000];
    PORTE = 0x01;
    Delay_ms(1);
    
    // Display hundreds digit
    PORTA = binary_pattern[(num / 100) % 10];
    PORTE = 0x02;
    Delay_ms(1);
    
    // Display tens digit
    PORTA = binary_pattern[(num / 10) % 10];
    PORTE = 0x04;
    Delay_ms(1);
    
    // Display ones digit
    PORTA = binary_pattern[num % 10];
    PORTE = 0x08;
    Delay_ms(1);
}

void main() {
    // Initialize microcontroller settings
    AD1PCFG = 0xFFFF;      // Configure AN pins as digital I/O
    JTAGEN_bit = 0;        // Disable JTAG
    TRISA = 0x00;          // Set PORTA as output (segment control)
    TRISE = 0x00;          // Set PORTE as output (digit selection)
    
    while(1) {
        unsigned int delay_cycles;
        unsigned int i;
        
        // Calculate display time (position * 100ms)
        // We divide the total delay into 4ms cycles (1ms per digit * 4 digits)
        delay_cycles = (position * 100) / 4;
        
        // Display current number for calculated duration
        for(i = 0; i < delay_cycles; i++) {
            displayNumber(currentFib);
        }
        
        // Calculate next Fibonacci number
        unsigned int nextFib = currentFib + prevFib;
        prevFib = currentFib;
        currentFib = nextFib;
        
        // Increment position counter
        position++;
        
        // Reset sequence if number becomes too large for display
        if(currentFib > 9999) {
            currentFib = 1;
            prevFib = 0;
            position = 1;
        }
    }
}

